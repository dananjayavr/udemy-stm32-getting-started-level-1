/*
 * gpio.c
 *
 *  Created on: Dec 7, 2021
 *      Author: dananjaya
 */

#include "gpio.h"

void gpio_LED_config(void) {
  // Enable Port B clock
  RCC->APB2ENR |= RCC_APB2ENR_IOPBEN;
  // Mode to output
  CLEAR_BIT(GPIOB->CRH, GPIO_CRH_MODE13);
  SET_BIT(GPIOB->CRH, GPIO_CRH_MODE13_1);
  CLEAR_BIT(GPIOB->CRH, GPIO_CRH_MODE14);
  SET_BIT(GPIOB->CRH, GPIO_CRH_MODE14_1);
  // Push/Pull
  CLEAR_BIT(GPIOB->CRH, GPIO_CRH_CNF13);
  CLEAR_BIT(GPIOB->CRH, GPIO_CRH_CNF14);
}

void gpio_LED_writeGreen(bool state) {
  if(state)
  {
    SET_BIT(GPIOB->ODR, GPIO_ODR_ODR13);
  }
  else
  {
    CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR13);
  }
}

void gpio_LED_writeRed(bool state) {
  if(state)
  {
    //SET_BIT(GPIOB->ODR, GPIO_ODR_ODR14);
    //*(uint32_t *)0x40010C0C |= GPIO_ODR_ODR14; // same as above, writing to actual address
    // bit-band address formula :
    // bit_word_addr = bit_band_base + (byte_offset x 32) + (bit_number x 4)
    // peripheral_base = 0x40000000
    // bit_band_base = 0x42000000
    // bit_band_byte_offset x 32 = (10C00 + 0x0C) x 32
    // bit_number x 4 = 50
    *(uint32_t *)0x42345AA4 = 1;
  }
  else
  {
    //CLEAR_BIT(GPIOB->ODR, GPIO_ODR_ODR14);
    *(uint32_t *)0x420002A8 = 0;
  }
}

void gpio_LED_toggleGreen(void) {
  TOGGLE_BIT(GPIOB->ODR,GPIO_ODR_ODR13);
}

void gpio_LED_toggleRed(void) {
  TOGGLE_BIT(GPIOB->ODR,GPIO_ODR_ODR14);
}

void gpio_PB_config(void) {
  // Enable clock port A
  SET_BIT(RCC->APB2ENR,RCC_APB2ENR_IOPAEN);
  // Input mode
  CLEAR_BIT(GPIOA->CRL, GPIO_CRL_MODE0);
  // Floating
  CLEAR_BIT(GPIOA->CRL, GPIO_CRL_CNF0);
  SET_BIT(GPIOA->CRL, GPIO_CRL_CNF0_0);
}

bool gpio_PB_read(void) {
  return (bool)(GPIOA->IDR & GPIO_IDR_IDR0);
  //return 0;
}

void gpio_SS_config(void) {
  // PA8
  // Enable clock port A
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN);
  // Input mode
  CLEAR_BIT(GPIOA->CRH, GPIO_CRH_MODE8);
  // Floating
  CLEAR_BIT(GPIOA->CRH, GPIO_CRH_CNF8);
  SET_BIT(GPIOA->CRH, GPIO_CRH_CNF8_0);

  // PA15
  // Enable clock port A
  SET_BIT(RCC->APB2ENR, RCC_APB2ENR_IOPAEN);
  // Input mode
  CLEAR_BIT(GPIOA->CRH, GPIO_CRH_MODE15);
  // Floating
  CLEAR_BIT(GPIOA->CRH, GPIO_CRH_CNF15);
  SET_BIT(GPIOA->CRH, GPIO_CRH_CNF15_0);
  // Remap PA15 from JTAG to IO
  SET_BIT(RCC->APB2ENR,  RCC_APB2ENR_AFIOEN);
  SET_BIT(RCC->APB2ENR, RCC_APB1ENR_PWREN);
  CLEAR_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG);
  SET_BIT(AFIO->MAPR, AFIO_MAPR_SWJ_CFG_1);

}

bool gpio_SS1_read(void) {
  return (bool)(GPIOA->IDR & GPIO_IDR_IDR8);
}
bool gpio_SS2_read(void) {
  return (bool)(GPIOA->IDR & GPIO_IDR_IDR15);
}
